diff --git a/perf/lua/1mops_write.lua b/perf/lua/1mops_write.lua
index bcd2b7a1a..3245ba7ce 100755
--- a/perf/lua/1mops_write.lua
+++ b/perf/lua/1mops_write.lua
@@ -256,7 +256,8 @@ local function fiber_load(start, s)
             s:replace{start}
             start = start + 1
         end
-        box.commit()
+        box.commit({wait='complete'})
+        io.stderr:write("yield\n")
         fiber.yield()
     end
 end
@@ -308,6 +309,7 @@ end)
 -- start fibers for the main load
 for i = 1, num_fibers do
     fibers_storage[i] = fiber.create(fiber_load, i*num_ops, space)
+    fibers_storage[i]:name(string.format("loader%d", i))
     if (fibers_storage[i]:status() ~= 'dead') then
         fibers_storage[i]:wakeup() -- needed for backward compatibility with 1.7
     end
@@ -339,6 +341,8 @@ else
         cpu_time = cpu_time,
         items = ops_done,
     }
+    print(ops_done)
+    print(res.real_time)
     res.items_per_second = ops_done / res.real_time
 end
 
diff --git a/src/box/txn.c b/src/box/txn.c
index 1658ab4dc..e1c76ebd1 100644
--- a/src/box/txn.c
+++ b/src/box/txn.c
@@ -836,6 +836,11 @@ txn_complete_success(struct txn *txn)
 static void
 txn_on_journal_write(struct journal_entry *entry)
 {
+	//struct backtrace bt;
+	//backtrace_collect(&bt, fiber(), 1);
+	//backtrace_print(&bt, STDERR_FILENO);
+	//fflush(stderr);
+
 	struct txn *txn = entry->complete_data;
 	assert(txn->signature == TXN_SIGNATURE_UNKNOWN);
 	txn->signature = entry->res;
diff --git a/src/box/txn_limbo.c b/src/box/txn_limbo.c
index 57afcae13..b53ed052c 100644
--- a/src/box/txn_limbo.c
+++ b/src/box/txn_limbo.c
@@ -55,6 +55,9 @@ txn_limbo_read_confirm(struct txn_limbo *limbo, int64_t lsn);
 static int
 txn_limbo_write_confirm(struct txn_limbo *limbo, int64_t lsn)
 {
+	fprintf(stderr, "txn_limbo_write_confirm: %ld\n", lsn);
+	fflush(stderr);
+	
 	assert(lsn > limbo->confirmed_lsn);
 	assert(!limbo->is_in_rollback);
 	return txn_limbo_write_synchro(limbo, IPROTO_RAFT_CONFIRM, lsn, 0,
diff --git a/src/lib/core/fiber.c b/src/lib/core/fiber.c
index 06d9a6272..29251229a 100644
--- a/src/lib/core/fiber.c
+++ b/src/lib/core/fiber.c
@@ -491,6 +491,19 @@ fiber_call_impl(struct fiber *callee)
 	struct fiber *caller = fiber();
 	struct cord *cord = cord();
 
+
+	if (strcmp(cord()->name, "main") == 0) {
+		static int cnt = 0;
+		if (++cnt > 300) exit(0);
+		fprintf(stderr, "transfer from: %s to %s\n", caller->name, callee->name);
+		fflush(stderr);
+		//if (strcmp(callee->name, "interactive") == 0 ||
+		//	strcmp(caller->name, "interactive") == 0) {
+		//		fprintf(stderr, "transfer from: %s to %s\n", caller->name, callee->name);
+		//		fflush(stderr);
+		//	}
+	}
+
 	/* Ensure we aren't switching to a fiber parked in fiber_loop */
 	assert(callee->f != NULL && callee->fid != 0);
 	assert(callee->flags & FIBER_IS_READY || callee == &cord->sched);
@@ -609,6 +622,32 @@ fiber_get_ctx(struct fiber *f)
 void
 fiber_wakeup(struct fiber *f)
 {
+	if (strcmp(cord()->name, "main") == 0) {
+		if (strcmp(fiber()->name, "sched") == 0) {
+			//struct backtrace bt;
+			//backtrace_collect(&bt, fiber(), 2);
+//
+			//const struct backtrace_frame *frame = bt.frames;
+//
+			//uintptr_t offset = 0;
+			//const char *proc_name = backtrace_frame_resolve(frame, &offset);
+			//proc_name = proc_name != NULL ? proc_name : "??";
+			//int chars_written = dprintf(STDERR_FILENO, C_FRAME_STR_FMT "\n", 2,
+			//				frame->ip, proc_name, offset);
+			//assert(chars_written >= 0);
+//
+//
+			//fflush(stderr);
+
+			struct backtrace bt;
+			backtrace_collect(&bt, fiber(), 1);
+			backtrace_print(&bt, STDERR_FILENO);
+			fflush(stderr);
+		}
+		fprintf(stderr, "fiber %s wakes up fiber %s\n", fiber()->name, f->name);
+		fflush(stderr);
+	}
+
 	/*
 	 * DEAD fiber can be lingering in the cord fiber list
 	 * if it is joinable. And once its execution is complete
@@ -839,6 +878,16 @@ fiber_yield_impl(MAYBE_UNUSED bool will_switch_back)
 	struct fiber *callee = caller->caller;
 	caller->caller = &cord->sched;
 
+	if (strcmp(cord()->name, "main") == 0) {
+		fprintf(stderr, "transfer from: %s to %s\n", caller->name, callee->name);
+		fflush(stderr);
+		//if (strcmp(callee->name, "interactive") == 0 ||
+		//	strcmp(caller->name, "interactive") == 0) {
+		//		fprintf(stderr, "transfer from: %s to %s\n", caller->name, callee->name);
+		//		fflush(stderr);
+		//	}
+	}
+
 	/** By convention, these triggers must not throw. */
 	if (! rlist_empty(&caller->on_yield))
 		trigger_run(&caller->on_yield, NULL);
@@ -890,6 +939,8 @@ static void
 fiber_schedule_timeout(ev_loop *loop,
 		       ev_timer *watcher, int revents)
 {
+	fprintf(stderr, "fiber_schedule_timeout\n");
+	fflush(stderr);
 	(void) loop;
 	(void) revents;
 
@@ -907,6 +958,11 @@ fiber_schedule_timeout(ev_loop *loop,
 bool
 fiber_yield_timeout(ev_tstamp delay)
 {
+	struct backtrace bt;
+	backtrace_collect(&bt, fiber(), 1);
+	backtrace_print(&bt, STDERR_FILENO);
+	fflush(stderr);
+
 	struct ev_timer timer;
 	ev_timer_init(&timer, fiber_schedule_timeout, delay, 0);
 	struct fiber_watcher_data state = { fiber(), false };
@@ -970,6 +1026,7 @@ fiber_schedule_list(struct rlist *list)
 	if (rlist_empty(list))
 		return;
 
+	int cnt = 1;
 	first = last = rlist_shift_entry(list, struct fiber, state);
 	assert(last->flags & FIBER_IS_READY);
 
@@ -977,7 +1034,14 @@ fiber_schedule_list(struct rlist *list)
 		last->caller = rlist_shift_entry(list, struct fiber, state);
 		last = last->caller;
 		assert(last->flags & FIBER_IS_READY);
+		++cnt;
 	}
+
+	if(strcmp(cord()->name, "main") == 0) {
+		fprintf(stderr, "schedule %d fibers\n", cnt);
+		fflush(stderr);
+	}
+
 	last->caller = fiber();
 	assert(fiber() == &cord()->sched);
 	clock_set_on_csw(fiber());
